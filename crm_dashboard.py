# -*- coding: utf-8 -*-
"""crm_dashboard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZVcHF58evKYlvC5I2xzyJeWlvduZhoo6
"""

!pip install streamlit pyngrok

import sqlite3
import pandas as pd
import streamlit as st
import plotly.express as px

# Connect to the SQLite database
conn = sqlite3.connect('crm.db')
cursor = conn.cursor()

cursor.execute('''
CREATE TABLE IF NOT EXISTS customers (
    id INTEGER PRIMARY KEY,
    name TEXT,
    email TEXT,
    phone TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS interactions (
    id INTEGER PRIMARY KEY,
    customer_id INTEGER,
    interaction_type TEXT,
    date TEXT,
    notes TEXT,
    FOREIGN KEY(customer_id) REFERENCES customers(id)
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS tasks (
    id INTEGER PRIMARY KEY,
    customer_id INTEGER,
    task TEXT,
    due_date TEXT,
    FOREIGN KEY(customer_id) REFERENCES customers(id)
)
''')
conn.commit()

# Utility functions
def get_customers():
    return pd.read_sql_query('SELECT * FROM customers', conn)

def generate_interaction_report():
    return pd.read_sql_query('''
    SELECT c.name AS Customer, c.email AS Email, i.interaction_type AS Type,
           i.date AS Date, i.notes AS Notes
    FROM interactions i
    JOIN customers c ON i.customer_id = c.id
    ''', conn)

def get_tasks():
    return pd.read_sql_query('SELECT * FROM tasks WHERE due_date >= DATE("now")', conn)

# Streamlit app
st.title("CRM Dashboard")

# Section: Customer Data
st.header("Customer Data")
customer_data = get_customers()
if not customer_data.empty:
    st.dataframe(customer_data)
else:
    st.write("No customer data available.")

# Section: Interaction Report
st.header("Interaction Report")
interaction_data = generate_interaction_report()
if not interaction_data.empty:
    st.dataframe(interaction_data)

    # Visualization: Interaction Types
    st.header("Interaction Types Distribution")
    fig = px.histogram(interaction_data, x="Type", color="Type",
                       title="Distribution of Interaction Types",
                       labels={"Type": "Interaction Type"})
    st.plotly_chart(fig)
else:
    st.write("No interaction data available.")

# Section: Task Management
st.header("Tasks")
task_data = get_tasks()
if not task_data.empty:
    st.dataframe(task_data)
else:
    st.write("No pending tasks.")

# Close the database connection when the app stops
@st.cache_resource
def close_connection():
    conn.close()

close_connection()

