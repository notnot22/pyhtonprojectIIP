# -*- coding: utf-8 -*-
"""Pyhton.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1utmpBdJPnuczuuqF63RL9P2hdHc2t67T
"""

!pip install streamlit  # Install the streamlit package

import sqlite3
import pandas as pd
import streamlit as st # Now this line should work
import plotly.express as px

# Initialize database connection
conn = sqlite3.connect('crm.db')
cursor = conn.cursor()

# Create tables if they don't exist
cursor.execute('''
CREATE TABLE IF NOT EXISTS customers (
    id INTEGER PRIMARY KEY,
    name TEXT,
    email TEXT,
    phone TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS interactions (
    id INTEGER PRIMARY KEY,
    customer_id INTEGER,
    interaction_type TEXT,
    date TEXT,
    notes TEXT,
    FOREIGN KEY(customer_id) REFERENCES customers(id)
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS tasks (
    id INTEGER PRIMARY KEY,
    customer_id INTEGER,
    task TEXT,
    due_date TEXT,
    FOREIGN KEY(customer_id) REFERENCES customers(id)
)
''')

conn.commit()

# Helper functions
def add_customer(name, email, phone):
    cursor.execute('''
    INSERT INTO customers (name, email, phone)
    VALUES (?, ?, ?)
    ''', (name, email, phone))
    conn.commit()

def get_customers():
    cursor.execute('SELECT * FROM customers')
    return cursor.fetchall()

def add_interaction(customer_id, interaction_type, date, notes):
    cursor.execute('''
    INSERT INTO interactions (customer_id, interaction_type, date, notes)
    VALUES (?, ?, ?, ?)
    ''', (customer_id, interaction_type, date, notes))
    conn.commit()

def generate_interaction_report():
    query = '''
    SELECT c.name AS Customer, c.email AS Email, i.interaction_type AS InteractionType, i.date AS Date, i.notes AS Notes
    FROM interactions i
    JOIN customers c ON i.customer_id = c.id
    '''
    return pd.read_sql_query(query, conn)

def add_task(customer_id, task, due_date):
    cursor.execute('''
    INSERT INTO tasks (customer_id, task, due_date)
    VALUES (?, ?, ?)
    ''', (customer_id, task, due_date))
    conn.commit()

def get_tasks():
    query = 'SELECT * FROM tasks WHERE due_date >= date("now")'
    return pd.read_sql_query(query, conn)

# Streamlit app
st.title("CRM Dashboard")

# Customer Data
st.header("Customer Data")
customer_data = get_customers()
customer_df = pd.DataFrame(customer_data, columns=['ID', 'Name', 'Email', 'Phone'])
st.dataframe(customer_df)

# Interaction Report
st.header("Interaction Report")
interaction_report = generate_interaction_report()
st.dataframe(interaction_report)

st.header("Interactions by Type")
if not interaction_report.empty:
    fig = px.histogram(interaction_report, x="InteractionType", color="InteractionType", title="Interaction Type Distribution")
    st.plotly_chart(fig)
else:
    st.write("No interaction data available.")

# Tasks
st.header("Upcoming Tasks")
task_data = get_tasks()
if not task_data.empty:
    st.dataframe(task_data)
else:
    st.write("No upcoming tasks.")

# Close the database connection when the app stops
conn.close()

!streamlit run app.py

